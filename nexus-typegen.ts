/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./src/context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  Role: "Clerk" | "Guest" | "Manager"
  RoomType: "Double" | "Exclusive" | "Presidential" | "Single"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Mutation: {};
  Query: {};
  Reservation: { // root type
    dateFrom: string; // String!
    dateTo: string; // String!
    id: string; // ID!
    roomId: number; // Int!
    userId: number; // Int!
  }
  Room: { // root type
    id: string; // ID!
    price: number; // Float!
    roomNumber: number; // Int!
    roomType: NexusGenEnums['RoomType']; // RoomType!
  }
  User: { // root type
    email: string; // String!
    firstName: string; // String!
    id: string; // ID!
    lastName: string; // String!
    role: NexusGenEnums['Role']; // Role!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    createReservation: NexusGenRootTypes['Reservation']; // Reservation!
    createRoom: NexusGenRootTypes['Room']; // Room!
    createUser: NexusGenRootTypes['User']; // User!
  }
  Query: { // field return type
    getReservation: NexusGenRootTypes['Reservation'] | null; // Reservation
    getReservations: Array<NexusGenRootTypes['Reservation'] | null> | null; // [Reservation]
    getRoom: NexusGenRootTypes['Room'] | null; // Room
    getRooms: Array<NexusGenRootTypes['Room'] | null> | null; // [Room]
    getUser: NexusGenRootTypes['User'] | null; // User
    getUsers: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  Reservation: { // field return type
    dateFrom: string; // String!
    dateTo: string; // String!
    id: string; // ID!
    roomId: number; // Int!
    userId: number; // Int!
  }
  Room: { // field return type
    id: string; // ID!
    price: number; // Float!
    roomNumber: number; // Int!
    roomType: NexusGenEnums['RoomType']; // RoomType!
  }
  User: { // field return type
    email: string; // String!
    firstName: string; // String!
    id: string; // ID!
    lastName: string; // String!
    role: NexusGenEnums['Role']; // Role!
  }
}

export interface NexusGenFieldTypeNames {
  Mutation: { // field return type name
    createReservation: 'Reservation'
    createRoom: 'Room'
    createUser: 'User'
  }
  Query: { // field return type name
    getReservation: 'Reservation'
    getReservations: 'Reservation'
    getRoom: 'Room'
    getRooms: 'Room'
    getUser: 'User'
    getUsers: 'User'
  }
  Reservation: { // field return type name
    dateFrom: 'String'
    dateTo: 'String'
    id: 'ID'
    roomId: 'Int'
    userId: 'Int'
  }
  Room: { // field return type name
    id: 'ID'
    price: 'Float'
    roomNumber: 'Int'
    roomType: 'RoomType'
  }
  User: { // field return type name
    email: 'String'
    firstName: 'String'
    id: 'ID'
    lastName: 'String'
    role: 'Role'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createReservation: { // args
      dateFrom: string; // String!
      dateTo: string; // String!
      roomId: number; // Int!
      userId: number; // Int!
    }
    createRoom: { // args
      price: number; // Float!
      roomNumber: number; // Int!
      roomType: NexusGenEnums['RoomType']; // RoomType!
    }
    createUser: { // args
      email: string; // String!
      firstName: string; // String!
      lastName: string; // String!
      role: NexusGenEnums['Role']; // Role!
    }
  }
  Query: {
    getReservation: { // args
      reservationId: number; // Int!
    }
    getRoom: { // args
      roomId: number; // Int!
    }
    getUser: { // args
      userId: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}